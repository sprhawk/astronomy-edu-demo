{"BehaviorGraphExtension":{"graphs":[],"nodes":[{"node":"Scene","nodeId":"Scene","metadatas":[]},{"node":"c707f40b-cdfd-433f-93ac-4eb0eb76cbdd","nodeId":"c707f40b-cdfd-433f-93ac-4eb0eb76cbdd","metadatas":[]}]},"BehaviorExtension":{"scripts":[{"name":"planet","id":"1b361477-5ce2-43ee-bcb9-82e72db88813","code":"import { Color4, Mesh } from 'babylonjs';\n\nexport default class Planet implements IScript {\n    // Public members\n    public blackColor = new Color4(0, 0, 0, 1);\n\n    /**\n     * Constructor\n     */\n    constructor (public mesh: Mesh) {\n\n    }\n\n    /**\n     * Called once starting the script\n     */\n    public start (): void {\n        // You can access the scene everywhere\n        scene.clearColor = this.blackColor;\n\n        // You can access the attached object everywhere\n        console.log(this.mesh);\n    }\n\n    /**\n     * Called on each frame\n     */\n    public update (): void {\n        // Your code...\n        this.mesh.rotation.y -= 0.01;\n    }\n\n    /**\n     * Called once the attached object has been disposed\n     */\n    public dispose (): void {\n        // Called once the attached object has been disposed\n    }\n}\n\n// Export the script as an attached script\n// (attached to a node or scene)\nexportScript(Planet);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Planet = (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Planet(mesh) {\r\n        this.mesh = mesh;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Planet.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Planet.prototype.update = function () {\r\n        // Your code...\r\n        this.mesh.rotation.y -= 0.01;\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Planet.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Planet;\r\n}());\r\nexports.default = Planet;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Planet);\r\n"},{"name":"solar","id":"c0e0c667-e249-47c7-80fc-36f225eed74b","code":"import { Color4, Mesh } from 'babylonjs';\n\nexport default class Solar implements IScript {\n    // Public members\n    public blackColor = new Color4(0, 0, 0, 1);\n\n    /**\n     * Constructor\n     */\n    constructor (public mesh: Mesh) {\n\n    }\n\n    /**\n     * Called once starting the script\n     */\n    public start (): void {\n        // You can access the scene everywhere\n        scene.clearColor = this.blackColor;\n\n        // You can access the attached object everywhere\n        console.log(this.mesh);\n    }\n\n    /**\n     * Called on each frame\n     */\n    public update (): void {\n        this.mesh.rotation.y -= 0.002;\n    }\n\n    /**\n     * Called once the attached object has been disposed\n     */\n    public dispose (): void {\n        // Called once the attached object has been disposed\n    }\n}\n\n// Export the script as an attached script\n// (attached to a node or scene)\nexportScript(Solar);","compiledCode":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar babylonjs_1 = require(\"babylonjs\");\r\nvar Solar = (function () {\r\n    /**\r\n     * Constructor\r\n     */\r\n    function Solar(mesh) {\r\n        this.mesh = mesh;\r\n        // Public members\r\n        this.blackColor = new babylonjs_1.Color4(0, 0, 0, 1);\r\n    }\r\n    /**\r\n     * Called once starting the script\r\n     */\r\n    Solar.prototype.start = function () {\r\n        // You can access the scene everywhere\r\n        scene.clearColor = this.blackColor;\r\n        // You can access the attached object everywhere\r\n        console.log(this.mesh);\r\n    };\r\n    /**\r\n     * Called on each frame\r\n     */\r\n    Solar.prototype.update = function () {\r\n        this.mesh.rotation.y -= 0.002;\r\n    };\r\n    /**\r\n     * Called once the attached object has been disposed\r\n     */\r\n    Solar.prototype.dispose = function () {\r\n        // Called once the attached object has been disposed\r\n    };\r\n    return Solar;\r\n}());\r\nexports.default = Solar;\r\n// Export the script as an attached script\r\n// (attached to a node or scene)\r\nexportScript(Solar);\r\n"}],"nodes":[{"node":"Planet","nodeId":"05e56609-cfef-448c-bb73-98b97779d6b6","metadatas":[{"active":true,"codeId":"1b361477-5ce2-43ee-bcb9-82e72db88813"}]},{"node":"SkyBox","nodeId":"c707f40b-cdfd-433f-93ac-4eb0eb76cbdd","metadatas":[]},{"node":"Solar","nodeId":"91af7e74-742a-444a-9aab-bb0406872ab0","metadatas":[{"active":true,"codeId":"c0e0c667-e249-47c7-80fc-36f225eed74b"}]},{"node":"Scene","nodeId":"Scene","metadatas":[]}]},"AssetsExtension":{"prefabs":[],"particles":[]}}